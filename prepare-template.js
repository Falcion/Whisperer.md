/* eslint-disable */
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

'use strict'
var __create = Object.create
var __defProp = Object.defineProperty
var __getOwnPropDesc = Object.getOwnPropertyDescriptor
var __getOwnPropNames = Object.getOwnPropertyNames
var __getProtoOf = Object.getPrototypeOf
var __hasOwnProp = Object.prototype.hasOwnProperty
var __defNormalProp = (obj, key, value) =>
  key in obj
    ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value })
    : (obj[key] = value)
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        })
  }
  return to
}
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod
  )
)
var __publicField = (obj, key, value) =>
  __defNormalProp(obj, typeof key !== 'symbol' ? key + '' : key, value)
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value))
      } catch (e) {
        reject(e)
      }
    }
    var rejected = (value) => {
      try {
        step(generator.throw(value))
      } catch (e) {
        reject(e)
      }
    }
    var step = (x) =>
      x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected)
    step((generator = generator.apply(__this, __arguments)).next())
  })
}

// prepare-template.ts
var fs = __toESM(require('fs-extra'))
var path = __toESM(require('path'))
var dotenv = __toESM(require('dotenv'))
var import_safe = require('colors/safe')
var PREPARE_MODULE = class {
  /**
   * Creates an instance of the PREPARE_MODULE.
   * @param {string[]} entries - An array of custom entries to include for searching.
   */
  constructor(entries) {
    /** The root directory of the module. */
    __publicField(this, 'ROOT_DIRECTORY', __dirname)
    /** An array of folder names to exclude from traversal. */
    __publicField(this, 'EXCLUDING_FOLDER', ['node_modules', 'venv', '.git', 'out'])
    /** An array of values to include in the search. */
    __publicField(this, 'INCLUDING_VALUES', ['FALCION', 'PATTERNU', 'PATTERNUGIT'])
    if (entries[0] !== 'NO') {
      for (const item of entries) this.INCLUDING_VALUES.push(item)
    }
  }
  /**
   * Searches for specified data within a file.
   * @param {string} filepath - The path of the file to search.
   * @param {string[]} data - An array of strings to search for within the file.
   * @returns {Promise<void>} - A promise that resolves when the search is complete.
   */
  search(filepath, data) {
    return __async(this, null, function* () {
      const content = (yield fs.readFile(filepath, 'utf-8')).split('\n')
      for (let i = 0; i < content.length; i++) {
        const line = content[i].toUpperCase()
        for (const target of data) {
          if (line.includes(target)) {
            console.info(
              (0, import_safe.green)(
                `Found "${target}" in L#${i} of:
` + (0, import_safe.cyan)(filepath)
              )
            )
          }
        }
      }
    })
  }
  /**
   * Recursively traverses a directory and searches for files.
   * @param {string} directory - The directory path to traverse.
   * @returns {Promise<void>} - A promise that resolves when the traversal is complete.
   */
  traverse(directory) {
    return __async(this, null, function* () {
      try {
        const files = yield fs.readdir(directory)
        for (const file of files) {
          const filepath = path.join(directory, file)
          const filestat = yield fs.stat(filepath)
          if (filestat.isDirectory()) {
            if (!this.EXCLUDING_FOLDER.includes(file)) {
              yield this.traverse(filepath)
            }
          } else if (filestat.isFile()) {
            yield this.search(filepath, this.INCLUDING_VALUES)
          } else {
            throw new Error(
              (0, import_safe.red)('Invalid data format:') + (0, import_safe.bgRed)(` ${filepath}`)
            )
          }
        }
      } catch (err) {
        const error = err instanceof Error ? err : new Error('Unknown error.')
        if (error.stack === 'ENOENT') {
          console.error((0, import_safe.red)(`File or directory not found: ${error.message}`))
        } else {
          console.error(
            (0, import_safe.red)(
              `Error reading directory: ${error.message}: ${error.stack !== void 0 ? error.stack : ''}`
            )
          )
        }
      }
    })
  }
}
fs.ensureFileSync(path.join(__dirname, '.env'))
fs.ensureFileSync(path.join(__dirname, 'manifest.json'))
fs.writeFileSync(path.join(__dirname, '.env'), 'EXAMPLE_API_KEY=')
fs.writeFileSync(path.join(__dirname, 'manifest.json'), JSON.stringify({}, void 0, 4))
dotenv.config({
  path: '.env',
  encoding: 'utf-8'
})
var PACKAGE_JSON = JSON.parse(fs.readFileSync('package.json', { encoding: 'utf-8' }))
var MANIFEST = JSON.parse(fs.readFileSync('manifest.json', { encoding: 'utf-8' }))
if (
  PACKAGE_JSON.name === MANIFEST.id &&
  PACKAGE_JSON.displayName === MANIFEST.name &&
  PACKAGE_JSON.description === MANIFEST.description &&
  PACKAGE_JSON.author.name === MANIFEST.author &&
  PACKAGE_JSON.author.url === MANIFEST.authorUrl &&
  PACKAGE_JSON.license === MANIFEST.license &&
  PACKAGE_JSON.version === MANIFEST.version
) {
  console.warn(
    (0, import_safe.bgGreen)(
      (0, import_safe.white)('Manifest is synced with package, keep everything as it was.')
    )
  )
} else {
  console.warn(
    (0, import_safe.bgBlue)(
      (0, import_safe.yellow)("Manifest is not synced with package's information, rewriting it.")
    )
  )
  fs.copyFileSync('manifest.json', 'manifest-backup.json')
  const inputJson = {
    id: PACKAGE_JSON.name,
    name: PACKAGE_JSON.displayName,
    description: PACKAGE_JSON.description,
    author: PACKAGE_JSON.author.name,
    authorUrl: PACKAGE_JSON.author.url,
    license: PACKAGE_JSON.license,
    version: PACKAGE_JSON.version
  }
  fs.writeFileSync('manifest.json', JSON.stringify(inputJson, void 0, 4))
}
void new PREPARE_MODULE(['NO']).traverse(PREPARE_MODULE.prototype.ROOT_DIRECTORY).then(() => {
  console.log((0, import_safe.green)('Traverse is finished.'))
})
/**
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @license MIT
 * @author Falcion
 * @year 2023-2024
 */
